name: Prod DevSecOps Pipeline

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    types: [closed]

env:
  CLUSTER_NAME: aks-staging
  CLUSTER_RESOURCE_GROUP: rg-staging-eastus
  NAMESPACE: redisdemo-prod
  CONTAINER_REGISTRY_URL: quay.io
  CONTAINER_REGISTRY_SECRET: secret-acr
  APP_NAME: redisprod
  IMAGE_TAG: prod

jobs:

  provision:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    name: Provisioning Infra & Configuration
    steps:
      - name: Load Configuration Files
        uses: actions/checkout@v3
        with:
          ref: main

  unittest:
    runs-on: ubuntu-latest
    name: Unit Test
    steps:
      - name: Checkout Unit Test Files
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Set up Java version
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Unit Test with Maven
        run: mvn test -Pcoverage
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: UnitTest-Reports
          path: '${{ github.workspace }}/target/site/jacoco'
          if-no-files-found: warn
          retention-days: 5

  codescan:
    runs-on: ubuntu-latest
    name: Static Code Scan
    steps:
      - name: Checkout Code for Scanning
        uses: actions/checkout@v3
        with:
          ref: main

  Code_CI:
    runs-on: ubuntu-latest
    name: Build Artifact
    needs: 
      - provision
      - unittest
      - codescan
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Set up Java for Build
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build Artifact
        run: mvn clean install -DskipTests
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: '${{ github.workspace }}/target/*.jar'
          retention-days: 5

  build_image_scanning:
    runs-on: ubuntu-latest
    name: Build Image
    needs: Code_CI
    steps:
      - name: Load Dockerfile
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Load Artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: '${{ github.workspace }}/target'
      - name: Connect to Azure 
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
      - name: Build image & Push to Azure Container Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.CONTAINER_REGISTRY_URL }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
      - name: Generate Trivy vulnerability scanner Report
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          format: 'json'
          output: 'report.json'
          exit-code: 0
          ignore-unfixed: true
          severity: CRITICAL
          vuln-type: 'os'
          image-ref: ${{ env.CONTAINER_REGISTRY_URL }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
      - name: Check Vuln Count
        id: vuln_count
        run: |
          report_file="report.json"
          vuln_count=$(jq '.Results | length' "$report_file")
          echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT 
      - name: Patch with Copacetic
        if: steps.vuln_count.outputs.vuln_count != '0'
        id: copa
        run: |
          function download() {
            DOWNLOAD_URL=$1
            DOWNLOAD_FILE=$2
            curl -L -o $DOWNLOAD_FILE $DOWNLOAD_URL
            tar -xzf $DOWNLOAD_FILE
            rm $DOWNLOAD_FILE
          }
          download https://github.com/project-copacetic/copacetic/releases/download/v0.3.0/copa_0.3.0_linux_amd64.tar.gz copa_0.3.0_linux_amd64.tar.gz
          download https://github.com/moby/buildkit/releases/download/v0.12.5/buildkit-v0.12.5.linux-amd64.tar.gz buildkit-v0.12.5.linux-amd64.tar.gz
          pushd ./bin
          sudo nohup ./buildkitd &
          popd
          sleep 5
          sudo docker login ${{ env.CONTAINER_REGISTRY_URL }} -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
          sudo ./copa patch -i ${{ env.CONTAINER_REGISTRY_URL }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} -r report.json -t ${{ env.IMAGE_TAG }}-1  
      - name: Docker Push Patched Image
        if: steps.login.conclusion == 'success'
        run: |
          docker tag  ${{ env.CONTAINER_REGISTRY_URL }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}-1 ${{ env.CONTAINER_REGISTRY_URL }}/${{ env.APP_NAME }}:${{ github.sha }}
          docker push ${{ env.CONTAINER_REGISTRY_URL }}/${{ env.APP_NAME }}:${{ github.sha }}
      - name: Get image digest
        id: prepare
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.CONTAINER_REGISTRY_URL }}/${{ env.APP_NAME }}:${{ github.sha }} | cut -d'@' -f2)
          echo "DIGEST=$DIGEST" >> $GITHUB_OUTPUT
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.CONTAINER_REGISTRY_URL }}/${{ env.APP_NAME }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          vuln-type: 'os'
          severity: 'CRITICAL'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Container image scanning
        uses: erzz/dockle-action@v1
        with:
          image: ${{ env.CONTAINER_REGISTRY_URL }}/${{ env.APP_NAME }}:${{ github.sha }}
          report-format: sarif
          report-name: dockle-results
          exit-code: 0
          dockle-version: 0.4.11
          accept-extensions: pem
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: dockle-results.sarif
      - name: setup Notation CLI
        uses: notaryproject/notation-action@v1.0.0
        with:
          version: "1.0.0"
      #- name: sign releasd artifact with notation-azure-kv plugin
      #  uses: notaryproject/notation-action/sign@v1
      #  with:
      #    plugin_name: azure-kv
      #    plugin_url: https://github.com/Azure/notation-azure-kv/releases/download/v1.0.1/notation-azure-kv_1.0.1_linux_amd64.tar.gz
      #    plugin_checksum: f8a75d9234db90069d9eb5660e5374820edf36d710bd063f4ef81e7063d3810b
      #    key_id: https://mykeyvaultzhangchl007.vault.azure.net/keys/Cloudinfraz/bd2bdc8bb8534a3d93bd3e1f8524785a
      #    target_artifact_reference: ${{ env.CONTAINER_REGISTRY_URL }}/${{ env.APP_NAME }}@${{ steps.prepare.outputs.DIGEST }}
      #    signature_format: cose
      #    plugin_config: |-
      #      self_signed=true
          
