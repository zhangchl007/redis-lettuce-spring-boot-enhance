name: DEV Pipeline

on:
  workflow_run:
    workflows: ["CodeQL"]
    branches: [dev]
    types:
    - completed
  push:
    branches:
      - dev
    paths-ignore:
      - 'README.md'
      - '.github/**'
      - 'deploy/**'
      - 'tests/**'  
  pull_request: 
    branches:
      - dev
  workflow_dispatch:

env:
  REGISTRY_NAME: myacr0218
  CLUSTER_NAME: aks-staging
  CLUSTER_RESOURCE_GROUP: rg-staging-eastus
  NAMESPACE: redisdemo-dev
  CONTAINER_REGISTRY_URL: myacr0218.azurecr.io
  CONTAINER_REGISTRY_SECRET: secret-acr
  APP_NAME: redisdemo

jobs:
  provision:
    runs-on: ubuntu-latest
    name: Provisioning Infra & Configuration

    steps:
    # CHECKOUT CONFIGUTAION FILES
    - name: Load Configuration Files
      uses: actions/checkout@v2
      with:
        ref: dev

  unittest:
    runs-on: ubuntu-latest
    name: Unit Test

    steps:
    # CHECKOUT DEV
    - name: Checkout Unit Test Files
      uses: actions/checkout@v2
      with:
        ref: dev
    
    # SET ENV JAVA
    - name: Set up Java version
      uses: actions/setup-java@v1
      with:
        java-version: '8'

    # BUILD MVN & RUN UNIT TEST
    - name: Unit Test with Maven
      run: mvn test

    # UPLOAD ARTIFACT
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: UnitTest-Reports
        path: '${{ github.workspace }}/target/site/jacoco/*'


  codescan:
    runs-on: ubuntu-latest
    name: Static Code Scan

    steps:
    - name: Checkout Code for Scanning
      uses: actions/checkout@v2
      with:
        ref: dev


  build:
    runs-on: ubuntu-latest
    name: Build Artifact
    needs: 
      - provision
      - unittest
      - codescan

    steps:
    # CHECKOUT SOURCE CODE
    - uses: actions/checkout@v2
      with:
        ref: dev

    # SETING UP JAVA FOR BUILD
    - uses: actions/setup-java@v1
      with:
        java-version: '8'
    
    # BUILD ONLY NOT TEST & UPLOAD RESULT
    - name: Build Artifact
      run: mvn clean install -DskipTests
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: artifact
        path: '${{ github.workspace }}/target/*.jar'

  push:
    runs-on: ubuntu-latest
    name: Build Image
    needs: build

    steps:
    # REQUIRED LOAD DOCKER FILE
    - name: Load Dockerfile
      uses: actions/checkout@v2
      with:
        ref: dev

    # DOWNLOAD ARTIFACT
    - name: Load Artifact
      uses: actions/download-artifact@v2
      with:
        name: artifact
        path: '${{ github.workspace }}/target'
      
    # CONNECT TO AZURE CONTAINER REGISTRY
    - name: Connect to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
      # DOCKER BUILD & PUSH TO AZURE CONTAINER REGISTRY
    - name: Build image & Push to Azure Container Registry
      run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }} ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:stg
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:stg
        
  deploy_dev:
    runs-on: ubuntu-latest
    needs: push
    name: Deloy to DEV
    environment:
      name: DEV
      url: 'http://redisdemo.apps.cloudinfraz.com/api/v1/otp'

    steps:
      # LOAD HELM CONFIG FOR DEPLOY
      - name: Load Helm configuration files
        uses: actions/checkout@v2
        with:
          ref: dev
      
      # INSTALL HELM ON GITHUB HOST
      - name: Install Helm on GitHub host
        uses: Azure/setup-helm@v1
        with:
          version: v3.3.1

      # LOGIN AKS WITH CREDENTAIL
      - name: Login Azure Kubernates
        uses: Azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}

      # CREATE NAMESPACE IF NOT EXIST
      - name: Create namespace on AKS
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
      
      # CREATE IMAGE ACR SECRET IF NOT EXIST
      - name: Create Image ACR Secret If not exist
        uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ env.NAMESPACE }}
          container-registry-url: ${{ env.CONTAINER_REGISTRY_URL }}
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ env.CONTAINER_REGISTRY_SECRET }}
        id: create-secret
      
      # HELM DEPLOY OR UPGRADE TO AKS
      - name: Helm Deploy and Upgrade to AKS
        run: |
          helm upgrade --install --create-namespace --atomic --wait --namespace ${{ env.NAMESPACE }} ${{ env.APP_NAME }}  --set image.name=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }} --set imagePullSecrets[0].name=${{ env.CONTAINER_REGISTRY_SECRET }}

  integrate_test:
    runs-on: ubuntu-latest
    name: Product Test with Robot Framework
    needs: deploy_dev

    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v2
      with:
        ref: dev

    # EXECUTE PRODUCT TEST WITH ROBOT FRAMEWORK ACTION
    - name: Robot Framework Action
      uses: tarathep/robotframework-github-action@v1.0
      with:
        tests_dir: '${{ github.workspace }}/tests/robot'
        reports_dir: '${{ github.workspace }}/tests/robot/reports'
    # UPLOAD REPORTS
    - name: Upload Reports
      uses: actions/upload-artifact@v2
      with:
        name: Product Test Reports
        path: '${{ github.workspace }}/tests/robot/reports/*'
