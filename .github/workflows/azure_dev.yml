name: DevSecOps Pipeline

on:
  push:
    branches:
      - dev
    paths-ignore:
      - 'README.md'
      - 'deploy/**'
      - 'tests/**'  
  workflow_dispatch:

env:
  REGISTRY_NAME: myacr0218
  CLUSTER_NAME: aks-staging
  CLUSTER_RESOURCE_GROUP: rg-staging-eastus
  NAMESPACE: redisdemo-dev
  CONTAINER_REGISTRY_URL: myacr0218.azurecr.io
  CONTAINER_REGISTRY_SECRET: secret-acr
  APP_NAME: redisdev
  IMAGE_TAG: dev

jobs:
  provision:
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    name: Provisioning Infra & Configuration

    steps:
    - name: Load Configuration Files
      uses: actions/checkout@v3
      with:
        ref: dev

  unittest:
    runs-on: ubuntu-latest
    name: Unit Test

    steps:
    - name: Checkout Unit Test Files
      uses: actions/checkout@v3
      with:
        ref: dev
    
    - name: Set up Java version
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
        cache: 'maven'

    - name: Unit Test with Maven
      run: mvn test -Pcoverage

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: UnitTest-Reports
        path: '${{ github.workspace }}/target/site/jacoco'
        if-no-files-found: warn
        retention-days: 5

  codescan:
    runs-on: ubuntu-latest
    name: Static Code Scan

    steps:
    - name: Checkout Code for Scanning
      uses: actions/checkout@v3
      with:
        ref: dev
        
    # Add SonarQube scanning
    #- name: SonarQube Scan
    # uses: sonarsource/sonarqube-scan-action@master
    #  env:
    #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
     #   SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  Code_CI:
    runs-on: ubuntu-latest
    name: Build Artifact
    needs: 
      - provision
      - unittest
      - codescan

    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v3
      with:
        ref: dev

    - name: Set up Java for Build
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
        cache: 'maven'
    
    - name: Build Artifact
      run: mvn clean install -DskipTests
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: artifact
        path: '${{ github.workspace }}/target/*.jar'
        retention-days: 5

  build_image_scanning:
    runs-on: ubuntu-latest
    name: Build Image
    needs: Code_CI

    steps:
    - name: Load Dockerfile
      uses: actions/checkout@v3
      with:
        ref: dev
        
    - name: Load Artifact
      uses: actions/download-artifact@v4
      with:
        name: artifact
        path: '${{ github.workspace }}/target'
        
    - name: Connect to Azure 
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Connect to Azure Container Registry
      id: login
      run: |
        az acr login --name ${{ env.REGISTRY_NAME }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Build image & Push to Azure Container Registry
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
        
    - name: Generate Trivy vulnerability scanner Report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'image'
        format: 'json'
        output: 'report.json'
        exit-code: 0
        ignore-unfixed: true
        severity: CRITICAL
        vuln-type: 'os'
        image-ref: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
        
    - name: Check Vuln Count
      id: vuln_count
      run: |
        report_file="report.json"
        vuln_count=$(jq '.Results | length' "$report_file")
        echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT 
        
    - name: Patch with Copacetic
      if: steps.vuln_count.outputs.vuln_count != '0'
      id: copa
      run: |
        function download() {
          DOWNLOAD_URL=$1
          DOWNLOAD_FILE=$2
          curl -L -o $DOWNLOAD_FILE $DOWNLOAD_URL
          tar -xzf $DOWNLOAD_FILE
          rm $DOWNLOAD_FILE
        }
        download https://github.com/project-copacetic/copacetic/releases/download/v0.3.0/copa_0.3.0_linux_amd64.tar.gz copa_0.3.0_linux_amd64.tar.gz
        download https://github.com/moby/buildkit/releases/download/v0.12.5/buildkit-v0.12.5.linux-amd64.tar.gz buildkit-v0.12.5.linux-amd64.tar.gz
        pushd ./bin
        sudo nohup ./buildkitd &
        popd
        sleep 5
        sudo docker login ${{ env.REGISTRY_NAME }}.azurecr.io -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
        sudo ./copa patch -i ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} -r report.json -t ${{ env.IMAGE_TAG }}-1  

    - name: Docker Push Patched Image
      if: steps.login.conclusion == 'success'
      run: |
        docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}-1 ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        
    - name: Get image digest
      id: prepare
      run: |
        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }} | cut -d'@' -f2)
        echo "DIGEST=$DIGEST" >> $GITHUB_OUTPUT
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        ignore-unfixed: true
        vuln-type: 'os'
        severity: 'CRITICAL'
      
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
   
    - name: Container image scanning
      uses: erzz/dockle-action@v1
      with:
        image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        report-format: sarif
        report-name: dockle-results
        exit-code: 0
        dockle-version: 0.4.11
        accept-extensions: pem
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: dockle-results.sarif
       
    - name: Setup Notation CLI
      uses: notaryproject/notation-action@v1.0.0
      with:
        version: "1.0.0"

    # Due to the limitation of azure-kv, we disable this step
    #- name: Sign released artifact with notation-azure-kv plugin
    #  uses: notaryproject/notation-action/sign@v1
    #  with:
    #    plugin_name: azure-kv
    #    plugin_url: https://github.com/Azure/notation-azure-kv/releases/download/v1.0.1/notation-azure-kv_1.0.1_linux_amd64.tar.gz
    #    plugin_checksum: f8a75d9234db90069d9eb5660e5374820edf36d710bd063f4ef81e7063d3810b
    #    key_id: https://mykeyvaultzhangchl007.vault.azure.net/keys/Cloudinfraz/bd2bdc8bb8534a3d93bd3e1f8524785a
    #    target_artifact_reference: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}@${{ steps.prepare.outputs.DIGEST }}
    #    signature_format: cose
    #    plugin_config: |-
    #      self_signed=true
    
          
  deploy_dev:
    runs-on: ubuntu-latest
    needs: build_image_scanning
    name: Deploy to DEV
    environment:
      name: DEV
      url: 'http://redisdev.apps.cloudinfraz.com/api/v1/otp'

    steps:
      - name: Load Helm configuration files
        uses: actions/checkout@v3
        with:
          ref: dev
      
      - name: Install Helm on GitHub host
        uses: Azure/setup-helm@v1
        with:
          version: v3.13.3
  
      - name: Set up kubelogin for non-interactive login
        run: |
          curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.9/kubelogin-linux-amd64.zip
          sudo unzip -j kubelogin-linux-amd64.zip -d /usr/local/bin
          rm -f kubelogin-linux-amd64.zip
          kubelogin --version

      - name: Connect to Azure 
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Login Azure Kubernetes
        uses: Azure/aks-set-context@v3
        with:
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: true

      - name: Create namespace on AKS
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -
      
      - name: Create Image ACR Secret If not exist
        uses: azure/k8s-create-secret@v4
        with:
          namespace: ${{ env.NAMESPACE }}
          container-registry-url: ${{ env.CONTAINER_REGISTRY_URL }}
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ env.CONTAINER_REGISTRY_SECRET }}
        id: create-secret
      
      - name: Helm Deploy and Upgrade to AKS
        run: |
          helm upgrade --install --create-namespace --atomic --wait --namespace ${{ env.NAMESPACE }} ${{ env.APP_NAME }} ./deploy/helm/redisdemo \
          --set image.name=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }} \
          --set "ingress.hosts[0].host=redisdev.apps.cloudinfraz.com,ingress.hosts[0].paths[0].path=/api/v1/otp,ingress.hosts[0].paths[0].pathType=Prefix" \
          --set imagePullSecrets[0].name=${{ env.CONTAINER_REGISTRY_SECRET }}

  integrate_test:
    runs-on: ubuntu-latest
    name: Product Test with Robot Framework
    needs: deploy_dev

    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v3
      with:
        ref: dev

    - name: Robot Framework Action
      uses: tarathep/robotframework-github-action@v1.0
      with:
        tests_dir: '${{ github.workspace }}/tests/robot'
        reports_dir: '${{ github.workspace }}/tests/robot/reports'
        
    - name: Upload Reports
      uses: actions/upload-artifact@v4
      with:
        name: Product-Test-Reports
        path: '${{ github.workspace }}/tests/robot/reports/*'
        retention-days: 5

    - name: OWASP ZAP Scan-DAST
      uses: zaproxy/action-baseline@v0.9.0
      with:
        docker_name: 'owasp/zap2docker-stable'
        target: 'http://redisdev.apps.cloudinfraz.com/api/v1/otp'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'